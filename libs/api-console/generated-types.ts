/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Superadmin API
 * API used fow Waypoint app configuration and management
 * OpenAPI spec version: 1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
export type GetSnapshotByRevisionPathParameters = {
  id: string
}
export type GetNodeByIdPathParameters = {
  id: string
}
export type GetNodesByScopeIdPathParameters = {
  id: string
}
export type GetRevisionByIdPathParameters = {
  id: string
}
export type GetRevisionsByNodePathParameters = {
  id: string
}
export type GetScopesByTenantIdPathParameters = {
  id: string
}
export type GetScopeByIdPathParameters = {
  id: string
}
export type UpdateNodeTemplateDefinitionPathParameters = {
  id: string
}
export type GetDefinitionsByConfiguration200Item =
  | NodeDefinitionSchema
  | NodeDefinitionTemplateSchema

export type GetDefinitionsByConfigurationPathParameters = {
  id: string
}
export type GetDefinitionsByTenantPathParameters = {
  id: string
}
export type UpdateNodeDefinitionPathParameters = {
  id: string
}
export type GetDefinitionById200 =
  | NodeDefinitionSchema
  | NodeDefinitionTemplateSchema

export type GetDefinitionByIdPathParameters = {
  id: string
}
export type ActivateAnalysisConfigurationPathParameters = {
  id: string
}
export type UpdateAnalysisConfigurationPathParameters = {
  id: string
}
export type GetAnalysisConfigurationPathParameters = {
  id: string
}
export type GetAnalysisConfigurationsPathParameters = {
  id: string
}
export type WaypointaiModulesGraphModelsGraphNodeDefinitionType =
  (typeof WaypointaiModulesGraphModelsGraphNodeDefinitionType)[keyof typeof WaypointaiModulesGraphModelsGraphNodeDefinitionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WaypointaiModulesGraphModelsGraphNodeDefinitionType = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const

export type WaypointaiModulesGraphModelsGraphEdgeType =
  (typeof WaypointaiModulesGraphModelsGraphEdgeType)[keyof typeof WaypointaiModulesGraphModelsGraphEdgeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WaypointaiModulesGraphModelsGraphEdgeType = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const

export type EdgeSchema = {
  id: string
  source: string
  target: string
  type: WaypointaiModulesGraphModelsGraphEdgeType
}

export type SnapshotResponseSchema = {
  edges: EdgeSchema[]
  nodes: NodeSchema[]
}

export type DetailInputs = { [key: string]: any }

export type DetailExternalId = string | null

export type DetailData = { [key: string]: any }

export type Detail = {
  attributes: DetailAttributes
  data: DetailData
  external_id?: DetailExternalId
  input_hashes: string
  inputs: DetailInputs
  output_hash: string
}

export type DetailAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type DetailAttributes = DetailAttributesAnyOf | null

export type PerformRequestSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type PerformRequestSchemaAttributes =
  PerformRequestSchemaAttributesAnyOf | null

export type PerformRequestSchema = {
  attributes?: PerformRequestSchemaAttributes
  input_data: string
  resolver_type: Type
}

export type PerformResponseSchema = {
  result: string
}

export type NodeSchema = {
  created_at: string
  detail: Detail
  group_name: string
  id: string
  name: string
  revision: RevisionSchema
  type: WaypointaiModulesGraphModelsGraphNodeDefinitionType
}

export type RevisionDetailSchemaOutputData = string | null

export type RevisionDetailSchemaInputData = string | null

export type RevisionDetailSchemaFinishedAt = string | null

export type RevisionDetailSchemaAttributes =
  RevisionDetailSchemaAttributesAnyOf | null

export type RevisionDetailSchema = {
  attributes?: RevisionDetailSchemaAttributes
  finished_at?: RevisionDetailSchemaFinishedAt
  id: string
  initiated_at: string
  input_data?: RevisionDetailSchemaInputData
  output_data?: RevisionDetailSchemaOutputData
  resolver_type: Type
  status: Status
}

export type RevisionDetailSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type Status = (typeof Status)[keyof typeof Status]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Status = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const

export type RevisionSchemaOutputData = string | null

export type RevisionSchemaInputData = string | null

export type RevisionSchemaFinishedAt = string | null

export type RevisionSchemaAttributes = RevisionSchemaAttributesAnyOf | null

export type RevisionSchema = {
  attributes: RevisionSchemaAttributes
  finished_at?: RevisionSchemaFinishedAt
  id: string
  initiated_at: string
  input_data?: RevisionSchemaInputData
  output_data?: RevisionSchemaOutputData
  resolver_type: WaypointaiModulesGraphModelsGraphNodeDefinitionType
  status: Status
}

export type TenantSchemaName = string | null

export type TenantSchema = {
  id: string
  name?: TenantSchemaName
}

export type ScopeSchema = {
  external_url: string
  id: string
  tenant_id: string
  title: string
}

export type NodeDefinitionTemplateCreationSchemaAttributes =
  NodeDefinitionTemplateCreationSchemaAttributesAnyOf | null

export type NodeDefinitionTemplateCreationSchema = {
  attributes?: NodeDefinitionTemplateCreationSchemaAttributes
  group_name: string
  inputs: NodeInput[]
  name: string
  type: Type
}

export type NodeDefinitionCreationSchema = {
  analysis_configuration_id: string
  attributes?: NodeDefinitionCreationSchemaAttributes
  group_name: string
  inputs: NodeInput[]
  name: string
  type: Type
}

export type WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributesType =
  (typeof WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributesType)[keyof typeof WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributesType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributesType =
  {
    script: 'script',
  } as const

export type WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes =
  {
    function: string
    type?: WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributesType
  }

export type NodeDefinitionCreationSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type NodeDefinitionCreationSchemaAttributes =
  NodeDefinitionCreationSchemaAttributesAnyOf | null

export type WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributesType =
  (typeof WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributesType)[keyof typeof WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributesType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributesType =
  {
    prompt: 'prompt',
  } as const

export type WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes =
  {
    system_prompt: string
    type?: WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributesType
    user_prompt: string
  }

export type RevisionSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type NodeDefinitionTemplateCreationSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type Type = (typeof Type)[keyof typeof Type]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Type = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const

export type NodeInput = {
  alias: string
  definition: string
  id: string
  type: string
}

export type NodeDefinitionTemplateSchemaNodeType =
  (typeof NodeDefinitionTemplateSchemaNodeType)[keyof typeof NodeDefinitionTemplateSchemaNodeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeDefinitionTemplateSchemaNodeType = {
  node_template: 'node_template',
} as const

export type NodeDefinitionTemplateSchema = {
  attributes?: NodeDefinitionTemplateSchemaAttributes
  group_name: string
  id: string
  inputs: NodeInput[]
  name: string
  node_type?: NodeDefinitionTemplateSchemaNodeType
  type: Type
}

export type NodeDefinitionTemplateSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type NodeDefinitionTemplateSchemaAttributes =
  NodeDefinitionTemplateSchemaAttributesAnyOf | null

export type NodeDefinitionSchemaNodeType =
  (typeof NodeDefinitionSchemaNodeType)[keyof typeof NodeDefinitionSchemaNodeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeDefinitionSchemaNodeType = {
  tenant_node: 'tenant_node',
} as const

export type NodeDefinitionSchemaAttributesAnyOf =
  | WaypointaiModulesGraphNodeResolversScriptScriptResolverAttributes
  | WaypointaiModulesGraphNodeResolversPromptPromptResolverAttributes

export type NodeDefinitionSchemaAttributes =
  NodeDefinitionSchemaAttributesAnyOf | null

export type NodeDefinitionSchema = {
  analysis_configuration_id: string
  attributes?: NodeDefinitionSchemaAttributes
  group_name: string
  id: string
  inputs: NodeInput[]
  name: string
  node_type?: NodeDefinitionSchemaNodeType
  tenant_id: string
  type: Type
}

export type UpdateAnalysisConfigurationDescription = string | null

export type UpdateAnalysisConfiguration = {
  description?: UpdateAnalysisConfigurationDescription
  name: string
  version: string
}

export type CreateAnalysisConfigurationDescription = string | null

export type CreateAnalysisConfiguration = {
  description?: CreateAnalysisConfigurationDescription
  name: string
  tenant_id: string
  version: string
}

export type AnalysisConfigurationDescription = string | null

export type AnalysisConfigurationActivatedAt = string | null

export type AnalysisConfiguration = {
  activated_at?: AnalysisConfigurationActivatedAt
  created_at: string
  description?: AnalysisConfigurationDescription
  id: string
  name: string
  version: string
}

/**
 * @summary Create
 */
export const createAnalysisConfiguration = (
  createAnalysisConfiguration: CreateAnalysisConfiguration,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AnalysisConfiguration>> => {
  return axios.post(
    `/analysis-configuration/command/create`,
    createAnalysisConfiguration,
    options
  )
}

export const getCreateAnalysisConfigurationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAnalysisConfiguration>>,
    TError,
    { data: CreateAnalysisConfiguration },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAnalysisConfiguration>>,
  TError,
  { data: CreateAnalysisConfiguration },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAnalysisConfiguration>>,
    { data: CreateAnalysisConfiguration }
  > = (props) => {
    const { data } = props ?? {}

    return createAnalysisConfiguration(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateAnalysisConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAnalysisConfiguration>>
>
export type CreateAnalysisConfigurationMutationBody =
  CreateAnalysisConfiguration
export type CreateAnalysisConfigurationMutationError = AxiosError<unknown>

/**
 * @summary Create
 */
export const useCreateAnalysisConfiguration = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAnalysisConfiguration>>,
    TError,
    { data: CreateAnalysisConfiguration },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof createAnalysisConfiguration>>,
  TError,
  { data: CreateAnalysisConfiguration },
  TContext
> => {
  const mutationOptions = getCreateAnalysisConfigurationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get List
 */
export const getAnalysisConfigurations = (
  { id }: GetAnalysisConfigurationsPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AnalysisConfiguration[]>> => {
  return axios.get(`/analysis-configuration/by-tenant-id/${id}`, options)
}

export const getGetAnalysisConfigurationsQueryKey = ({
  id,
}: GetAnalysisConfigurationsPathParameters) => {
  return [`/analysis-configuration/by-tenant-id/${id}`] as const
}

export const getGetAnalysisConfigurationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAnalysisConfigurations>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetAnalysisConfigurationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAnalysisConfigurations>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAnalysisConfigurationsQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAnalysisConfigurations>>
  > = ({ signal }) =>
    getAnalysisConfigurations({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAnalysisConfigurations>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAnalysisConfigurationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAnalysisConfigurations>>
>
export type GetAnalysisConfigurationsQueryError = AxiosError<unknown>

/**
 * @summary Get List
 */
export const useGetAnalysisConfigurations = <
  TData = Awaited<ReturnType<typeof getAnalysisConfigurations>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetAnalysisConfigurationsPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAnalysisConfigurations>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAnalysisConfigurationsQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Detail
 */
export const getAnalysisConfiguration = (
  { id }: GetAnalysisConfigurationPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AnalysisConfiguration>> => {
  return axios.get(`/analysis-configuration/by-id/${id}`, options)
}

export const getGetAnalysisConfigurationQueryKey = ({
  id,
}: GetAnalysisConfigurationPathParameters) => {
  return [`/analysis-configuration/by-id/${id}`] as const
}

export const getGetAnalysisConfigurationQueryOptions = <
  TData = Awaited<ReturnType<typeof getAnalysisConfiguration>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetAnalysisConfigurationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAnalysisConfiguration>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAnalysisConfigurationQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAnalysisConfiguration>>
  > = ({ signal }) =>
    getAnalysisConfiguration({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAnalysisConfiguration>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAnalysisConfigurationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAnalysisConfiguration>>
>
export type GetAnalysisConfigurationQueryError = AxiosError<unknown>

/**
 * @summary Get Detail
 */
export const useGetAnalysisConfiguration = <
  TData = Awaited<ReturnType<typeof getAnalysisConfiguration>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetAnalysisConfigurationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAnalysisConfiguration>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAnalysisConfigurationQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update
 */
export const updateAnalysisConfiguration = (
  { id }: UpdateAnalysisConfigurationPathParameters,
  updateAnalysisConfiguration: UpdateAnalysisConfiguration,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AnalysisConfiguration>> => {
  return axios.post(
    `/analysis-configuration/by-id/${id}`,
    updateAnalysisConfiguration,
    options
  )
}

export const getUpdateAnalysisConfigurationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAnalysisConfiguration>>,
    TError,
    {
      pathParams: UpdateAnalysisConfigurationPathParameters
      data: UpdateAnalysisConfiguration
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAnalysisConfiguration>>,
  TError,
  {
    pathParams: UpdateAnalysisConfigurationPathParameters
    data: UpdateAnalysisConfiguration
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAnalysisConfiguration>>,
    {
      pathParams: UpdateAnalysisConfigurationPathParameters
      data: UpdateAnalysisConfiguration
    }
  > = (props) => {
    const { pathParams, data } = props ?? {}

    return updateAnalysisConfiguration(pathParams, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAnalysisConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAnalysisConfiguration>>
>
export type UpdateAnalysisConfigurationMutationBody =
  UpdateAnalysisConfiguration
export type UpdateAnalysisConfigurationMutationError = AxiosError<unknown>

/**
 * @summary Update
 */
export const useUpdateAnalysisConfiguration = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAnalysisConfiguration>>,
    TError,
    {
      pathParams: UpdateAnalysisConfigurationPathParameters
      data: UpdateAnalysisConfiguration
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAnalysisConfiguration>>,
  TError,
  {
    pathParams: UpdateAnalysisConfigurationPathParameters
    data: UpdateAnalysisConfiguration
  },
  TContext
> => {
  const mutationOptions = getUpdateAnalysisConfigurationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Activate
 */
export const activateAnalysisConfiguration = (
  { id }: ActivateAnalysisConfigurationPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AnalysisConfiguration[]>> => {
  return axios.post(
    `/analysis-configuration/activate/${id}`,
    undefined,
    options
  )
}

export const getActivateAnalysisConfigurationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateAnalysisConfiguration>>,
    TError,
    { pathParams: ActivateAnalysisConfigurationPathParameters },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof activateAnalysisConfiguration>>,
  TError,
  { pathParams: ActivateAnalysisConfigurationPathParameters },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activateAnalysisConfiguration>>,
    { pathParams: ActivateAnalysisConfigurationPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {}

    return activateAnalysisConfiguration(pathParams, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ActivateAnalysisConfigurationMutationResult = NonNullable<
  Awaited<ReturnType<typeof activateAnalysisConfiguration>>
>

export type ActivateAnalysisConfigurationMutationError = AxiosError<unknown>

/**
 * @summary Activate
 */
export const useActivateAnalysisConfiguration = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activateAnalysisConfiguration>>,
    TError,
    { pathParams: ActivateAnalysisConfigurationPathParameters },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof activateAnalysisConfiguration>>,
  TError,
  { pathParams: ActivateAnalysisConfigurationPathParameters },
  TContext
> => {
  const mutationOptions =
    getActivateAnalysisConfigurationMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get By Id
 */
export const getDefinitionById = (
  { id }: GetDefinitionByIdPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetDefinitionById200>> => {
  return axios.get(`/nodes-definition/by-id/${id}`, options)
}

export const getGetDefinitionByIdQueryKey = ({
  id,
}: GetDefinitionByIdPathParameters) => {
  return [`/nodes-definition/by-id/${id}`] as const
}

export const getGetDefinitionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDefinitionById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetDefinitionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDefinitionById>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDefinitionByIdQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDefinitionById>>
  > = ({ signal }) => getDefinitionById({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDefinitionById>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDefinitionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDefinitionById>>
>
export type GetDefinitionByIdQueryError = AxiosError<unknown>

/**
 * @summary Get By Id
 */
export const useGetDefinitionById = <
  TData = Awaited<ReturnType<typeof getDefinitionById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetDefinitionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDefinitionById>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDefinitionByIdQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update
 */
export const updateNodeDefinition = (
  { id }: UpdateNodeDefinitionPathParameters,
  nodeDefinitionCreationSchema: NodeDefinitionCreationSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeDefinitionSchema>> => {
  return axios.post(
    `/nodes-definition/by-id/${id}`,
    nodeDefinitionCreationSchema,
    options
  )
}

export const getUpdateNodeDefinitionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNodeDefinition>>,
    TError,
    {
      pathParams: UpdateNodeDefinitionPathParameters
      data: NodeDefinitionCreationSchema
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateNodeDefinition>>,
  TError,
  {
    pathParams: UpdateNodeDefinitionPathParameters
    data: NodeDefinitionCreationSchema
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateNodeDefinition>>,
    {
      pathParams: UpdateNodeDefinitionPathParameters
      data: NodeDefinitionCreationSchema
    }
  > = (props) => {
    const { pathParams, data } = props ?? {}

    return updateNodeDefinition(pathParams, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateNodeDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateNodeDefinition>>
>
export type UpdateNodeDefinitionMutationBody = NodeDefinitionCreationSchema
export type UpdateNodeDefinitionMutationError = AxiosError<unknown>

/**
 * @summary Update
 */
export const useUpdateNodeDefinition = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNodeDefinition>>,
    TError,
    {
      pathParams: UpdateNodeDefinitionPathParameters
      data: NodeDefinitionCreationSchema
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateNodeDefinition>>,
  TError,
  {
    pathParams: UpdateNodeDefinitionPathParameters
    data: NodeDefinitionCreationSchema
  },
  TContext
> => {
  const mutationOptions = getUpdateNodeDefinitionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get List By Tenant Id
 */
export const getDefinitionsByTenant = (
  { id }: GetDefinitionsByTenantPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeDefinitionSchema[]>> => {
  return axios.get(`/nodes-definition/by-tenant-id/${id}`, options)
}

export const getGetDefinitionsByTenantQueryKey = ({
  id,
}: GetDefinitionsByTenantPathParameters) => {
  return [`/nodes-definition/by-tenant-id/${id}`] as const
}

export const getGetDefinitionsByTenantQueryOptions = <
  TData = Awaited<ReturnType<typeof getDefinitionsByTenant>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetDefinitionsByTenantPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDefinitionsByTenant>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDefinitionsByTenantQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDefinitionsByTenant>>
  > = ({ signal }) =>
    getDefinitionsByTenant({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDefinitionsByTenant>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDefinitionsByTenantQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDefinitionsByTenant>>
>
export type GetDefinitionsByTenantQueryError = AxiosError<unknown>

/**
 * @summary Get List By Tenant Id
 */
export const useGetDefinitionsByTenant = <
  TData = Awaited<ReturnType<typeof getDefinitionsByTenant>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetDefinitionsByTenantPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDefinitionsByTenant>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDefinitionsByTenantQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get List By Analysis Configuration Id
 */
export const getDefinitionsByConfiguration = (
  { id }: GetDefinitionsByConfigurationPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetDefinitionsByConfiguration200Item[]>> => {
  return axios.get(`/nodes-definition/by-collection-id/${id}`, options)
}

export const getGetDefinitionsByConfigurationQueryKey = ({
  id,
}: GetDefinitionsByConfigurationPathParameters) => {
  return [`/nodes-definition/by-collection-id/${id}`] as const
}

export const getGetDefinitionsByConfigurationQueryOptions = <
  TData = Awaited<ReturnType<typeof getDefinitionsByConfiguration>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetDefinitionsByConfigurationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDefinitionsByConfiguration>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDefinitionsByConfigurationQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDefinitionsByConfiguration>>
  > = ({ signal }) =>
    getDefinitionsByConfiguration({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDefinitionsByConfiguration>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDefinitionsByConfigurationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDefinitionsByConfiguration>>
>
export type GetDefinitionsByConfigurationQueryError = AxiosError<unknown>

/**
 * @summary Get List By Analysis Configuration Id
 */
export const useGetDefinitionsByConfiguration = <
  TData = Awaited<ReturnType<typeof getDefinitionsByConfiguration>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetDefinitionsByConfigurationPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDefinitionsByConfiguration>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDefinitionsByConfigurationQueryOptions(
    { id },
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Templates
 */
export const getDefinitionsTemplates = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeDefinitionTemplateSchema[]>> => {
  return axios.get(`/nodes-definition/list/templates`, options)
}

export const getGetDefinitionsTemplatesQueryKey = () => {
  return [`/nodes-definition/list/templates`] as const
}

export const getGetDefinitionsTemplatesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDefinitionsTemplates>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDefinitionsTemplates>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetDefinitionsTemplatesQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDefinitionsTemplates>>
  > = ({ signal }) => getDefinitionsTemplates({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDefinitionsTemplates>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDefinitionsTemplatesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDefinitionsTemplates>>
>
export type GetDefinitionsTemplatesQueryError = AxiosError<unknown>

/**
 * @summary Get Templates
 */
export const useGetDefinitionsTemplates = <
  TData = Awaited<ReturnType<typeof getDefinitionsTemplates>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getDefinitionsTemplates>>,
      TError,
      TData
    >
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDefinitionsTemplatesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create
 */
export const createDefinition = (
  nodeDefinitionCreationSchema: NodeDefinitionCreationSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeDefinitionSchema>> => {
  return axios.post(
    `/nodes-definition/command/create`,
    nodeDefinitionCreationSchema,
    options
  )
}

export const getCreateDefinitionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDefinition>>,
    TError,
    { data: NodeDefinitionCreationSchema },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDefinition>>,
  TError,
  { data: NodeDefinitionCreationSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDefinition>>,
    { data: NodeDefinitionCreationSchema }
  > = (props) => {
    const { data } = props ?? {}

    return createDefinition(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDefinition>>
>
export type CreateDefinitionMutationBody = NodeDefinitionCreationSchema
export type CreateDefinitionMutationError = AxiosError<unknown>

/**
 * @summary Create
 */
export const useCreateDefinition = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDefinition>>,
    TError,
    { data: NodeDefinitionCreationSchema },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof createDefinition>>,
  TError,
  { data: NodeDefinitionCreationSchema },
  TContext
> => {
  const mutationOptions = getCreateDefinitionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Create Template
 */
export const createTemplateDefinition = (
  nodeDefinitionTemplateCreationSchema: NodeDefinitionTemplateCreationSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeDefinitionTemplateSchema>> => {
  return axios.post(
    `/nodes-definition/command/create-template`,
    nodeDefinitionTemplateCreationSchema,
    options
  )
}

export const getCreateTemplateDefinitionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTemplateDefinition>>,
    TError,
    { data: NodeDefinitionTemplateCreationSchema },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTemplateDefinition>>,
  TError,
  { data: NodeDefinitionTemplateCreationSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTemplateDefinition>>,
    { data: NodeDefinitionTemplateCreationSchema }
  > = (props) => {
    const { data } = props ?? {}

    return createTemplateDefinition(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateTemplateDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTemplateDefinition>>
>
export type CreateTemplateDefinitionMutationBody =
  NodeDefinitionTemplateCreationSchema
export type CreateTemplateDefinitionMutationError = AxiosError<unknown>

/**
 * @summary Create Template
 */
export const useCreateTemplateDefinition = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTemplateDefinition>>,
    TError,
    { data: NodeDefinitionTemplateCreationSchema },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof createTemplateDefinition>>,
  TError,
  { data: NodeDefinitionTemplateCreationSchema },
  TContext
> => {
  const mutationOptions = getCreateTemplateDefinitionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Update Template
 */
export const updateNodeTemplateDefinition = (
  { id }: UpdateNodeTemplateDefinitionPathParameters,
  nodeDefinitionTemplateCreationSchema: NodeDefinitionTemplateCreationSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeDefinitionTemplateSchema>> => {
  return axios.post(
    `/nodes-definition/template/by-id/${id}`,
    nodeDefinitionTemplateCreationSchema,
    options
  )
}

export const getUpdateNodeTemplateDefinitionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNodeTemplateDefinition>>,
    TError,
    {
      pathParams: UpdateNodeTemplateDefinitionPathParameters
      data: NodeDefinitionTemplateCreationSchema
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateNodeTemplateDefinition>>,
  TError,
  {
    pathParams: UpdateNodeTemplateDefinitionPathParameters
    data: NodeDefinitionTemplateCreationSchema
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateNodeTemplateDefinition>>,
    {
      pathParams: UpdateNodeTemplateDefinitionPathParameters
      data: NodeDefinitionTemplateCreationSchema
    }
  > = (props) => {
    const { pathParams, data } = props ?? {}

    return updateNodeTemplateDefinition(pathParams, data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateNodeTemplateDefinitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateNodeTemplateDefinition>>
>
export type UpdateNodeTemplateDefinitionMutationBody =
  NodeDefinitionTemplateCreationSchema
export type UpdateNodeTemplateDefinitionMutationError = AxiosError<unknown>

/**
 * @summary Update Template
 */
export const useUpdateNodeTemplateDefinition = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNodeTemplateDefinition>>,
    TError,
    {
      pathParams: UpdateNodeTemplateDefinitionPathParameters
      data: NodeDefinitionTemplateCreationSchema
    },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof updateNodeTemplateDefinition>>,
  TError,
  {
    pathParams: UpdateNodeTemplateDefinitionPathParameters
    data: NodeDefinitionTemplateCreationSchema
  },
  TContext
> => {
  const mutationOptions =
    getUpdateNodeTemplateDefinitionMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get Scope By Id
 */
export const getScopeById = (
  { id }: GetScopeByIdPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ScopeSchema>> => {
  return axios.get(`/scope/by-id/${id}`, options)
}

export const getGetScopeByIdQueryKey = ({ id }: GetScopeByIdPathParameters) => {
  return [`/scope/by-id/${id}`] as const
}

export const getGetScopeByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getScopeById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetScopeByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getScopeById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetScopeByIdQueryKey({ id })

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getScopeById>>> = ({
    signal,
  }) => getScopeById({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getScopeById>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScopeByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getScopeById>>
>
export type GetScopeByIdQueryError = AxiosError<unknown>

/**
 * @summary Get Scope By Id
 */
export const useGetScopeById = <
  TData = Awaited<ReturnType<typeof getScopeById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetScopeByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getScopeById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetScopeByIdQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Scopes By Tenant Id
 */
export const getScopesByTenantId = (
  { id }: GetScopesByTenantIdPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ScopeSchema[]>> => {
  return axios.get(`/scope/list/by-tenant-id/${id}`, options)
}

export const getGetScopesByTenantIdQueryKey = ({
  id,
}: GetScopesByTenantIdPathParameters) => {
  return [`/scope/list/by-tenant-id/${id}`] as const
}

export const getGetScopesByTenantIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getScopesByTenantId>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetScopesByTenantIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getScopesByTenantId>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetScopesByTenantIdQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getScopesByTenantId>>
  > = ({ signal }) => getScopesByTenantId({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getScopesByTenantId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetScopesByTenantIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getScopesByTenantId>>
>
export type GetScopesByTenantIdQueryError = AxiosError<unknown>

/**
 * @summary Get Scopes By Tenant Id
 */
export const useGetScopesByTenantId = <
  TData = Awaited<ReturnType<typeof getScopesByTenantId>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetScopesByTenantIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getScopesByTenantId>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetScopesByTenantIdQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get List
 */
export const getTenantList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TenantSchema[]>> => {
  return axios.get(`/tenant/list`, options)
}

export const getGetTenantListQueryKey = () => {
  return [`/tenant/list`] as const
}

export const getGetTenantListQueryOptions = <
  TData = Awaited<ReturnType<typeof getTenantList>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenantList>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTenantListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenantList>>> = ({
    signal,
  }) => getTenantList({ signal, ...axiosOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTenantList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTenantListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTenantList>>
>
export type GetTenantListQueryError = AxiosError<unknown>

/**
 * @summary Get List
 */
export const useGetTenantList = <
  TData = Awaited<ReturnType<typeof getTenantList>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenantList>>, TError, TData>
  >
  axios?: AxiosRequestConfig
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTenantListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Delete Technical Tenant
 */
export const deleteTechnicalTenant = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TenantSchema>> => {
  return axios.post(
    `/tenant/command/delete-technical-tenant`,
    undefined,
    options
  )
}

export const getDeleteTechnicalTenantMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTechnicalTenant>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTechnicalTenant>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTechnicalTenant>>,
    void
  > = () => {
    return deleteTechnicalTenant(axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteTechnicalTenantMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTechnicalTenant>>
>

export type DeleteTechnicalTenantMutationError = AxiosError<unknown>

/**
 * @summary Delete Technical Tenant
 */
export const useDeleteTechnicalTenant = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTechnicalTenant>>,
    TError,
    void,
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTechnicalTenant>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDeleteTechnicalTenantMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get List By Node Id
 */
export const getRevisionsByNode = (
  { id }: GetRevisionsByNodePathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RevisionSchema[]>> => {
  return axios.get(`/revision/list/by-node-id/${id}`, options)
}

export const getGetRevisionsByNodeQueryKey = ({
  id,
}: GetRevisionsByNodePathParameters) => {
  return [`/revision/list/by-node-id/${id}`] as const
}

export const getGetRevisionsByNodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getRevisionsByNode>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetRevisionsByNodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsByNode>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRevisionsByNodeQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRevisionsByNode>>
  > = ({ signal }) => getRevisionsByNode({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRevisionsByNode>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRevisionsByNodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRevisionsByNode>>
>
export type GetRevisionsByNodeQueryError = AxiosError<unknown>

/**
 * @summary Get List By Node Id
 */
export const useGetRevisionsByNode = <
  TData = Awaited<ReturnType<typeof getRevisionsByNode>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetRevisionsByNodePathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionsByNode>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRevisionsByNodeQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Detail By Id
 */
export const getRevisionById = (
  { id }: GetRevisionByIdPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RevisionDetailSchema>> => {
  return axios.get(`/revision/by-id/${id}`, options)
}

export const getGetRevisionByIdQueryKey = ({
  id,
}: GetRevisionByIdPathParameters) => {
  return [`/revision/by-id/${id}`] as const
}

export const getGetRevisionByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRevisionById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetRevisionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionById>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetRevisionByIdQueryKey({ id })

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRevisionById>>> = ({
    signal,
  }) => getRevisionById({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRevisionById>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRevisionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRevisionById>>
>
export type GetRevisionByIdQueryError = AxiosError<unknown>

/**
 * @summary Get Detail By Id
 */
export const useGetRevisionById = <
  TData = Awaited<ReturnType<typeof getRevisionById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetRevisionByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRevisionById>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRevisionByIdQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Nodes By Scope Id
 */
export const getNodesByScopeId = (
  { id }: GetNodesByScopeIdPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeSchema[]>> => {
  return axios.get(`/node/list/by-scope-id/${id}`, options)
}

export const getGetNodesByScopeIdQueryKey = ({
  id,
}: GetNodesByScopeIdPathParameters) => {
  return [`/node/list/by-scope-id/${id}`] as const
}

export const getGetNodesByScopeIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNodesByScopeId>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetNodesByScopeIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNodesByScopeId>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetNodesByScopeIdQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNodesByScopeId>>
  > = ({ signal }) => getNodesByScopeId({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNodesByScopeId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetNodesByScopeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNodesByScopeId>>
>
export type GetNodesByScopeIdQueryError = AxiosError<unknown>

/**
 * @summary Get Nodes By Scope Id
 */
export const useGetNodesByScopeId = <
  TData = Awaited<ReturnType<typeof getNodesByScopeId>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetNodesByScopeIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNodesByScopeId>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNodesByScopeIdQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get Detail Id
 */
export const getNodeById = (
  { id }: GetNodeByIdPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NodeSchema>> => {
  return axios.get(`/node/by-id/${id}`, options)
}

export const getGetNodeByIdQueryKey = ({ id }: GetNodeByIdPathParameters) => {
  return [`/node/by-id/${id}`] as const
}

export const getGetNodeByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNodeById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetNodeByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodeById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetNodeByIdQueryKey({ id })

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNodeById>>> = ({
    signal,
  }) => getNodeById({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNodeById>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetNodeByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNodeById>>
>
export type GetNodeByIdQueryError = AxiosError<unknown>

/**
 * @summary Get Detail Id
 */
export const useGetNodeById = <
  TData = Awaited<ReturnType<typeof getNodeById>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetNodeByIdPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodeById>>, TError, TData>
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNodeByIdQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Perform
 */
export const performSandbox = (
  performRequestSchema: PerformRequestSchema,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PerformResponseSchema>> => {
  return axios.post(`/sandbox/perform`, performRequestSchema, options)
}

export const getPerformSandboxMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof performSandbox>>,
    TError,
    { data: PerformRequestSchema },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationOptions<
  Awaited<ReturnType<typeof performSandbox>>,
  TError,
  { data: PerformRequestSchema },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof performSandbox>>,
    { data: PerformRequestSchema }
  > = (props) => {
    const { data } = props ?? {}

    return performSandbox(data, axiosOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PerformSandboxMutationResult = NonNullable<
  Awaited<ReturnType<typeof performSandbox>>
>
export type PerformSandboxMutationBody = PerformRequestSchema
export type PerformSandboxMutationError = AxiosError<unknown>

/**
 * @summary Perform
 */
export const usePerformSandbox = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof performSandbox>>,
    TError,
    { data: PerformRequestSchema },
    TContext
  >
  axios?: AxiosRequestConfig
}): UseMutationResult<
  Awaited<ReturnType<typeof performSandbox>>,
  TError,
  { data: PerformRequestSchema },
  TContext
> => {
  const mutationOptions = getPerformSandboxMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get Snapshot By Revision
 */
export const getSnapshotByRevision = (
  { id }: GetSnapshotByRevisionPathParameters,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SnapshotResponseSchema>> => {
  return axios.get(`/snapshot/by-revision-id/${id}`, options)
}

export const getGetSnapshotByRevisionQueryKey = ({
  id,
}: GetSnapshotByRevisionPathParameters) => {
  return [`/snapshot/by-revision-id/${id}`] as const
}

export const getGetSnapshotByRevisionQueryOptions = <
  TData = Awaited<ReturnType<typeof getSnapshotByRevision>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetSnapshotByRevisionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSnapshotByRevision>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSnapshotByRevisionQueryKey({ id })

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSnapshotByRevision>>
  > = ({ signal }) => getSnapshotByRevision({ id }, { signal, ...axiosOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSnapshotByRevision>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSnapshotByRevisionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSnapshotByRevision>>
>
export type GetSnapshotByRevisionQueryError = AxiosError<unknown>

/**
 * @summary Get Snapshot By Revision
 */
export const useGetSnapshotByRevision = <
  TData = Awaited<ReturnType<typeof getSnapshotByRevision>>,
  TError = AxiosError<unknown>,
>(
  { id }: GetSnapshotByRevisionPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSnapshotByRevision>>,
        TError,
        TData
      >
    >
    axios?: AxiosRequestConfig
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSnapshotByRevisionQueryOptions({ id }, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
